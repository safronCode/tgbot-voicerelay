import re
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from storage.database.db_instance import db
from telegram_bot.client.handlers.messages import channel_after_regcom
from telegram_bot.client.states.reg_state import RegState

on_reg_router = Router()

@on_reg_router.message(Command("reg"))
async def reg_command(message: Message, state: FSMContext):
    #todo –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –ª–æ–≥–∏
    try:
        db.create_user(message.from_user)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –≤ –ë–î: {e}")

    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* –∏ *—Ñ–∞–º–∏–ª–∏—é*\n\n'
             '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
             'üí°_–ù–∞–ø—Ä–∏–º–µ—Ä: \\"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\\"_',
        parse_mode='MarkdownV2'
    )
    await state.set_state(RegState.name)

# –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
@on_reg_router.message(RegState.name)
async def process_name(message: Message, state: FSMContext):
    full_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.fullname_occupied(full_name) == True:
        if db.get_id_by_name(full_name) == message.from_user.id:
            print('–ö–∞–π—Ñ—É—à–∫–∏')
            pass
        else:
            return await message.answer("‚ùó –ú—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :—Å\n"
                                        "\t–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Å–µ–≤–¥–æ–Ω–∏–º")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –¥–≤–µ —á–∞—Å—Ç–∏ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    if not re.fullmatch(r"[–ê-–Ø–∞-—è–Å—ë]{2,}( [–ê-–Ø–∞-—è–Å—ë]{2,})", full_name):
        return await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")


    first_name, last_name = full_name.split()
    db.update_field(message.from_user.id,'first_name', first_name.lower())
    db.update_field(message.from_user.id,'last_name', last_name.lower())
    db.update_field(message.from_user.id, 'full_name',full_name.lower())

    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à *email*\n\n'
             '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
             'üí°_–ù–∞–ø—Ä–∏–º–µ—Ä: \\"example@mymail\\.com\\"_',
        parse_mode='MarkdownV2'
    )
    await state.set_state(RegState.email)

# Email
@on_reg_router.message(RegState.email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()

    # üîç –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if not re.fullmatch(r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b", email):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru)")
        return

    try:
        db.update_field(message.from_user.id, 'email', email)
        db.update_field(message.from_user.id, 'is_registered', 1)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–Ω–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —é–∑–µ—Ä–∞\n{e}")

    await channel_after_regcom(message)
    await state.clear()

