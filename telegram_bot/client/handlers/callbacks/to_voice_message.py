import os
import asyncio

from aiogram import Router, Bot, F
from aiogram.types import Message
from aiogram.enums import ContentType, ChatAction

from storage.database.db_instance import db
from voice_processing.name_extractor import extract_text
from voice_processing.text2speech import recognize_speech_ogg, error_map_stt
from voice_processing.voice_pipeline import build_relay_prompt, parse_summary_response, escape_markdown
from voice_processing.yandexgpt import relay_gpt, error_map_gpt
from datetime import datetime
from telegram_bot.client.handlers.email.email_sender import email_sender

to_voice_router = Router()

#todo –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–π–º–∏–Ω–≥ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥—É–ª—è—Ö
@to_voice_router.message(F.content_type == ContentType.VOICE)
async def handle_voice(message: Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —é–∑–µ—Ä
    user_id = message.from_user.id

    if db.get_field('tg_id', user_id, 'is_registered') != 1:
        return await message.answer(
                        text='–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º \n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: /reg')

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º + –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
    BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "..", ".."))
    #todo —á–µ–∫–Ω—É—Ç—å –∫–∞–∫ –≤–µ–¥–µ—Ç —Å–µ–±—è –µ—Å–ª–∏ –Ω–µ—Ç storage/voice_ogg
    STORAGE_PATH = os.path.join(BASE_DIR, "storage", "voice_ogg")
    os.makedirs(STORAGE_PATH, exist_ok=True)
    OGG_PATH = os.path.join(STORAGE_PATH, f"voice_{message.chat.id}.ogg")

    file = await bot.get_file(message.voice.file_id)
    await bot.download_file(file.file_path, OGG_PATH)

    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

    try:
        await asyncio.sleep(0.1)

        # –û–±—Ä–∞—â–µ–Ω–∏—è –∫ –º–æ–¥–µ–ª—è–º + –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        #todo –≤—ã–ø–∏–ª
        text_from_voice = recognize_speech_ogg(OGG_PATH)

        stt_text = recognize_speech_ogg(OGG_PATH)

        if stt_text in error_map_stt:
            return await message.reply(text=error_map_stt[stt_text])

        text_pile = extract_text(stt_text)

        if text_pile is None:
            return await message.reply(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

        text_from_gpt = relay_gpt(build_relay_prompt(text_pile['message_text'])).capitalize()
        topic_message = relay_gpt(f'–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–µ, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç 2-3 —Å–ª–æ–≤–∞: {text_from_gpt}')
        if text_from_gpt in error_map_gpt:
            return await message.reply(error_map_gpt[text_from_voice])

        #answer = parse_summary_response(text_from_gpt)

        #if isinstance(answer, dict):

        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        email_template = {
            "subject": topic_message.capitalize(),
            "message": text_from_gpt,
            "sender": f"telegram: @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id,'full_name')).title()})",
            "date": datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        recipient_id = db.get_id_by_name(text_pile['full_name_db'])

        # if recipient_id is None:
        #     await message.reply(
        #                 text=f"–£ –Ω–∞—Å –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {answer['recipient']}\n\n"
        #                       "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! :)")

        recipient_channel = db.get_field('tg_id', recipient_id, 'channel')

        if recipient_channel == 0:
            recipient_username = db.get_field('tg_id',recipient_id,'username')
            return await message.reply(
                    text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ... ‚ùå\n"
                         f"@{recipient_username} –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

        elif recipient_channel == 1:
            sender_username = message.from_user.username
            recipient_username = db.get_field('tg_id', recipient_id, 'username')
            await message.reply(
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ tg –∏ email {text_pile['full_name_gt']} (@{recipient_username}) ‚úÖ\n\n"
                     "–í–æ—Ç —á—Ç–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                     "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                     "üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     f"üë§ –æ—Ç @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id,'full_name')).title()})\n\n\n"
                     f"{text_from_gpt}")
            await message.bot.send_message(
                chat_id=recipient_id,
                text="üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     f"üë§ –æ—Ç @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id, 'full_name')).title()})\n\n\n"
                     f"{text_from_gpt}")


        elif recipient_channel == 2:
            recipient_email = db.get_field('tg_id', recipient_id, 'email')
            recipient_username = db.get_field('tg_id', recipient_id, 'username')

            await message.reply(
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ tg –∏ email {text_pile['full_name_gt']} (@{recipient_username}) ‚úÖ\n\n"
                     "–í–æ—Ç —á—Ç–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                     "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                     "üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     f"üë§ –æ—Ç @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id,'full_name')).title()})\n\n\n"
                     f"{text_from_gpt}")
            email_sender(email_template, recipient_email)

        elif recipient_channel == 3:
            sender_username = message.from_user.username
            recipient_username = db.get_field('tg_id', recipient_id, 'username')
            recipient_email = db.get_field('tg_id', recipient_id, 'email')
            print({escape_markdown(text_from_gpt)})
            await message.reply(
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ tg –∏ email {text_pile['full_name_gt']} (@{recipient_username}) ‚úÖ\n\n"
                      "–í–æ—Ç —á—Ç–æ —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                      "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                      "üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                     f"üë§ –æ—Ç @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id,'full_name')).title()})\n\n\n"
                     f"{text_from_gpt}")

            await message.bot.send_message(
                chat_id=recipient_id,
                text="üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                    f"üë§ –æ—Ç @{message.from_user.username} ({(db.get_field('tg_id', message.from_user.id,'full_name')).title()})\n\n\n"
                    f"{text_from_gpt}")

            email_sender(email_template, recipient_email)

    except PermissionError as e:
        await message.reply(
            text="‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(f"PermissionError: {e}")

    finally:
        #–ù–µ —Ö—Ä–∞–Ω–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤
        if os.path.exists(OGG_PATH):
            os.remove(OGG_PATH)
